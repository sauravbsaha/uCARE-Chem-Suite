q()
biocLite("ChemmineR")
source("https://bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
biocLite("ChemmineR")
library("chemmineR")
library("ChemmineR")
library(shiny); runApp('C:/Users/Saurav Saha/Dropbox/office/Saurav_Saha_SHIATS/Chemoinformatics_uCARE/analysis/drug_class_based_Classification/r_scripts/web_gui/resistance_gene_predictor/test_20170618_vipul_2.R')
q()
library(shiny); runApp('C:/Users/Saurav Saha/Dropbox/office/Saurav_Saha_SHIATS/Chemoinformatics_uCARE/analysis/drug_class_based_Classification/r_scripts/web_gui/resistance_gene_predictor/test_run_23_08_2017.R')
runApp('C:/Users/Saurav Saha/Dropbox/office/Saurav_Saha_SHIATS/Chemoinformatics_uCARE/analysis/drug_class_based_Classification/r_scripts/web_gui/resistance_gene_predictor/test_run_23_08_2017.R')
runApp('C:/Users/Saurav Saha/Dropbox/office/Saurav_Saha_SHIATS/Chemoinformatics_uCARE/analysis/drug_class_based_Classification/r_scripts/web_gui/resistance_gene_predictor/test_run_23_08_2017.R')
runApp('C:/Users/Saurav Saha/Dropbox/office/Saurav_Saha_SHIATS/Chemoinformatics_uCARE/analysis/drug_class_based_Classification/r_scripts/web_gui/resistance_gene_predictor/test_run_23_08_2017.R')
runApp('C:/Users/Saurav Saha/Dropbox/office/Saurav_Saha_SHIATS/Chemoinformatics_uCARE/analysis/drug_class_based_Classification/r_scripts/web_gui/resistance_gene_predictor/test_run_23_08_2017.R')
library(shiny); runApp('C:/Users/Saurav Saha/Dropbox/office/Saurav_Saha_SHIATS/Chemoinformatics_uCARE/analysis/drug_class_based_Classification/r_scripts/web_gui/resistance_gene_predictor/test_run_23_08_2017.R')
runApp('C:/Users/Saurav Saha/Dropbox/office/Saurav_Saha_SHIATS/Chemoinformatics_uCARE/analysis/drug_class_based_Classification/r_scripts/web_gui/resistance_gene_predictor/test_run_23_08_2017.R')
library(shiny); runApp('C:/Users/Saurav Saha/Dropbox/office/Saurav_Saha_SHIATS/Chemoinformatics_uCARE/analysis/drug_class_based_Classification/r_scripts/web_gui/resistance_gene_predictor/test_run_23_08_2017.R')
install.packages("shiny")
source("http://bioconductor.org/biocLite.R") # Sources the biocLite.R installation script.
biocLite("ChemmineR") # Installs the package.
library(shiny); print(source('C:/Users/Saurav Saha/Dropbox/office/Saurav_Saha_SHIATS/Chemoinformatics_uCARE/analysis/drug_class_based_Classification/r_scripts/resistance_gene_predictor/test_run_11092017_Vipul1.R')$value)
install.packages(c("boot", "cluster", "codetools", "foreign", "lattice", "MASS", "Matrix", "mgcv", "nlme", "Rcpp", "rpart", "survival"))
q()
install.packages("Rcpp")
library("ChemmineR")
RStudio.Version()
q()
library(shiny); runApp('C:/Users/Saurav Saha/Dropbox/office/Saurav_Saha_SHIATS/Chemoinformatics_uCARE/analysis/drug_class_based_Classification/r_scripts/resistance_gene_predictor/test_run_11092017_Vipul1.R')
install.packages("cohen.kappa")
install.packages("KappaV")
install.packages("pROC")
library("pROC", lib.loc="~/R/win-library/3.4")
install.packages(c("ape", "BH", "circlize", "DBI", "dendextend", "digest", "fpc", "future", "GlobalOptions", "globals", "httpuv", "lazyeval", "listenv", "mclust", "mvtnorm", "openssl", "Rcpp", "RCurl", "rlang", "robustbase", "shape", "slam", "tibble", "tm", "viridis", "viridisLite", "yaml"))
install.packages("pwr")
?pwr
??pwr
?power.prop.test
install.packages("epitools")
library("epitools", lib.loc="~/R/win-library/3.4")
library("pwr")
power.prop.test(n=294,p1=03,p2=.2)
power.prop.test(n=294,p1=.3,p2=.2)
power.prop.test(n=29400,p1=.3,p2=.2)
detach("package:epitools", unload=TRUE)
q()
library(shiny); runApp('C:/Users/Saurav Saha/Dropbox/office/Saurav_Saha_SHIATS/PhD/Chemoinformatics_uCARE_Ecoli/analysis/drug_class_based_Classification/r_scripts/resistance_gene_predictor/predictor.R')
installed.packages("devtools")
install.packages("devtools")
install.packages("devtools")
citation("ape")
citation("ChemmineR")
citation("ChemmineR")
library("ChemmineR")
citation("ChemmineR")
citation("usethis")
data("iris")
str("iris")
str(iris)
table(iris)
table(iris$Species)
table(iris$Species)
str(iris)
head(iris)
set.seed(9850)
runif(nrow(iris))
gp<- runif(nrow(iris))
gp
iris2<- iris[order(gp),]
iris2
str(iris)
summary(iris[,c[1,2,3,4]])
summary(iris[,c(1,2,3,4)])
normalize <-  function(x){
return((x - min(x) / max(x) -min(x)))
}
View(normalize)
normalize(c(1,2,3,4,5))
normalize <-  function(x){
+  return((x - min(x) / max(x) -min(x)))
}
normalize(c(1,2,3,4,5))
normalize <-  function(x){
+  return((x - min(x) / (max(x) -min(x))))
}
normalize(c(1,2,3,4,5))
normalize <-  function(x){
return((x - min(x) / (max(x) -min(x))))
}
normalize(c(1,2,3,4,5))
normalize <-  function(x){
return( (x- min(x)) / (max(x)- min(x)) )
}
normalize(c(1,2,3,4,5))
normalize(c(1,24,35,46,55))
iris_normalized <- as.data.frame(lapply(iris2[,c[1,2,3,4]]))
iris_normalized <- as.data.frame(lapply(iris2[,c(1,2,3,4)], normalize))
iris_normalized
str(iris_normalized)
summary(iris_normalized)
iris_train <- iris_normalized[1:129]
iris_train <- iris_normalized[1:129,]
iris_test <- iris_normalized[130:150,]
iris_train_target<- iris2[1:129, 5]
iris_train_test<- iris2[130:150, 5]
require(class)
sqrt(150)
m1<- knn(train = iris_train, test = iris_test, cl= iris_train_test, k=13)
m1<- knn(train = iris_train, test = iris_test, cl= iris_train_target, k=13)
m1<- knn(train = iris_train, test = iris_test, cl= iris_train_target, k=13)
m1
table(iris_train_test,m1)
table(iris_test_target,m1)
table(iris_train_test,m1)
rm(list = ls())
data("iris")
str(iris)
table(iris$Species)
head(iris)
head(iris, 10)
set.seed(9850)
runif(5)
runif(150)
gp<- runif(nrow(iris))
gp
head(iris, 15)
iris2<- iris[order(gp),]
head(iris2, 15)
summary(iris[,c(1,2,3,4)])
head(iris2, 1)
normalize <-  function(x){
return( (x- min(x)) / (max(x)- min(x)) )
}
head(iris2, 15)
iris_normalized <- as.data.frame(lapply(iris2[,c(1,2,3,4)], normalize))
head(iris_normalized, 15)
summary(iris_normalized)
iris_train <- iris_normalized[1:129,]
iris_test <- iris_normalized[130:150,]
iris_train_target<- iris2[1:129, 5]
iris_train_target
iris_train_test<- iris2[130:150, 5]
iris_train_test
require(class)
sqrt
sqrt(iris_train_target)
sqrt(iris)
sqrt(iris$Species)
sqrt
sqrt(nrow(iris$Species))
nrow(iris_train_target)
nrow("iris_train_target")
nrow(iris_train)
sqrt(nrow(iris_train))
m1<- knn(train = iris_train, test = iris_test, cl= iris_train_target, k=11)
summary(m1)
table(iris_train_test,m1)
m1<- knn(train = iris_train, test = iris_test, cl= iris_train_target, k=13)
table(iris_train_test,m1)
m1<- knn(train = iris_train, test = iris_test, cl= iris_train_target, k=7)
table(iris_train_test,m1)
m1<- knn(train = iris_train, test = iris_test, cl= iris_train_target, k=3)
table(iris_train_test,m1)
m1<- knn(train = iris_train, test = iris_test, cl= iris_train_target, k=1)
table(iris_train_test,m1)
install.packages("c50")
install.packages("C50")
install.packages("C50")
require(C50)
require(C50)
install.packages("C50")
require(C50)
library("C50", lib.loc="~/R/win-library/3.4")
remove.packages("C50", lib="~/R/win-library/3.4")
install.packages("libcoin")
install.packages("C50")
require(C50)
library(C50)
rm(list = ls())
library(C50)
m1<-C5.0(irisr[1:100, -5], irisr[1:100,5])
summary(iris[,c(1,2,3,4)])
data("iris")
str(iris)
set.seed(9850)
gp<- runif(nrow(iris))
irisr<- iris[order(gp),]
str(irisr)
m1<-C5.0(irisr[1:100, -5], irisr[1:100,5])
summary(iris[,c(1,2,3,4)])
m1
summary(m1)
plot(m1)
p1<- predict(m1, irisr[101:150,])
table(irisr[101:150,5], Predicted=p1)
table(irisr[101:150,5], Predicted=p1)
install.packages("rpart")
install.packages("rpart")
install.packages("rpart.plot")
require("rpart")
require("rpart.plot")
m2<-rpart(Species ~ ., data = irisr[1:100,], method = "class"  )
m2
plot(m2)
m2
rpart.plot(m2)
rpart.plot(m2)
rpart.plot(m2, model = TRUE)
??rpart
??rpart.plot
rpart.plot(m2, type = 3, extra = 101, fallen.leaves = T)
p3<-predict(m2, irisr[101:150,], type = "class")
table(irisr[101:150,5],Predicted = p3)
table(irisr[101:150,5],Predicted = p3)
rm(list = ls())
??C50
library(C50)
??C50
??C5,0
??C5.0
data("iris")
str(iris)
table
table(iris$Species)
head(iris, 10)
set.seed(9850)
gp<- runif(nrow(iris))
gp
irisr<- iris[order(gp),]
str(irisr)
head(irisr)
str(irisr)
irisr[1:100, -5]
irisr[1:100, 5]
m1<-C5.0(irisr[1:100, -5], irisr[1:100,5])
m1
summary(m1)
plot(m1)
str(irisr)
m2<-rpart(Species ~ ., data = irisr[1:100,], method = "class"  )
summary(m2)
rpart.plot(m2, type = 3, extra = 101, fallen.leaves = T)
p3<-predict(m2, irisr[101:150,], type = "class")
p2<-predict(m1, irisr[101:150,], type = "class")
table(irisr[101:150,5],Predicted = p3)
table(irisr[101:150,5],Predicted = p2)
install.packages(uCAREChemSuiteCLI)
install.packages("uCAREChemSuiteCLI")
library("uCAREChemSuiteCLI", lib.loc="C:/Program Files/R/R-3.5.1/library")
install.packages("usethis")
install.packages("usethis")
example.class.deterministic<- system.file('extdata/example.sdf', package="uCAREChemSuiteCLI")
drug.class.deterministic(example.class.deterministic)
library("uCAREChemSuiteCLI", lib.loc="C:/Program Files/R/R-3.5.1/library")
example.class.deterministic<- system.file('extdata/example.sdf', package="uCAREChemSuiteCLI")
drug.class.deterministic(example.class.deterministic)
example.class.stochastic<- system.file('extdata/example.sdf', package="uCAREChemSuiteCLI")
drug.class.stochastic(example.class.stochastic,"3","0.25")
example.resistome.deterministic<- system.file('extdata/example.sdf', package="uCAREChemSuiteCLI")
drug.resistome.deterministic(example.resistome.deterministic)
q()
rm(list=ls())
66666666666666  + 555555555555555
444+5555
# A Glorified calculator ----
2 + 2
6 - 9
4 * 4
(80-72) / (4 * 2)
# Variables ----
# Saving data in the variables,
# objects and assignment operators
a <- 12 * 5 #assigned object a
a
# Overwriting object ----
a <- 15
# Naming objects ----
1variable <-3
!variable <-3
varibale! <- 3
variable3 <- 3
my.variable <- 3
my_variable <- 3
MyVaribale <-3
rm(a)
rm(ls=())
rm(list = ls())
a<-5
A
rm(a)
# Data classes ----
10.5 #numeric
12
100
"Male" # Character
Male   # Needs double quotes
TRUE
FALSE
t # Capital letters
f
# Data structures ----
# Vectors (Arrays)
numbers <- c(3,4,5,5)
numbers[1]
numbers.loop <- c(1:5)
numbers.loop
numbers.loop <- 1:5
numbers.loop <- 1:500
numbers.loop
# List
list_data <- list("Red", "Green", c(21,32,11), TRUE, 51.23, 119.1)
print(list_data)
# Matrix
M <- matrix(c(3:14), nrow = 4, byrow = TRUE)
print(M)
q()
rm(list=ls())
rm(list = ls())
q()
0.0002^2
0.0002^250
0.0002^25
0.0002^250
0.0002^251
0.0002^2500
setwd("D:/Dropbox/Dropbox/office/Saurav_Saha_SHIATS/PhD/Chemoinformatics_uCARE_Pseudomonas_aeruginosa/Programming/uCAREChemSuite_GUI_objective2")
library(shiny); runApp('predictor.R')
detach("package:uCAREChemSuiteCLIV2", unload=TRUE)
library("uCAREChemSuiteCLIV2", lib.loc="~/R/win-library/3.5")
library("uCAREChemSuiteCLI", lib.loc="C:/Program Files/R/R-3.5.1/library")
runApp('predictor.R')
detach("package:uCAREChemSuiteCLIV2", unload=TRUE)
detach("package:uCAREChemSuiteCLI", unload=TRUE)
setwd("D:/Dropbox/Dropbox/office/Saurav_Saha_SHIATS/PhD/Chemoinformatics_uCARE_Pseudomonas_aeruginosa/Programming/package_obective2/uCAREChemSuiteV2/R")
library("uCAREChemSuiteV2")
library("uCAREChemSuiteCLIV2", lib.loc="~/R/win-library/3.5")
setwd("D:/Dropbox/Dropbox/office/Saurav_Saha_SHIATS/PhD/Chemoinformatics_uCARE_Pseudomonas_aeruginosa/Programming/uCAREChemSuite_GUI_objective2/example")
drug.class.deterministic("daunomycin.sdf")
drug.class.deterministic("test1.sdf")
setwd("D:/Dropbox/Dropbox/office/Saurav_Saha_SHIATS/PhD/Chemoinformatics_uCARE_Pseudomonas_aeruginosa/Programming/package_obective2/uCAREChemSuiteV2/R")
setwd("D:/Dropbox/Dropbox/office/Saurav_Saha_SHIATS/PhD/Chemoinformatics_uCARE_Pseudomonas_aeruginosa/Programming/uCAREChemSuite_GUI_objective2/example")
drug.class.deterministic("daunomycin.sdf")
drug.class.stochastic("daunomycin.sdf", 3, 0.3)
drug.class.stochastic("test1.sdf", 3, 0.3)
setwd("D:/Dropbox/Dropbox/office/Saurav_Saha_SHIATS/PhD/Chemoinformatics_uCARE_Pseudomonas_aeruginosa/Programming/uCAREChemSuite_GUI_objective2")
runApp('predictor.R')
q()
